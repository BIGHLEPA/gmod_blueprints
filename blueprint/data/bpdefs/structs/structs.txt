STRUCT ParticleAttachment, For use with Entity:CreateParticleSystem
{
	PIN attachtype=PATTACH_ABSORIGIN, PN_Enum, PNF_Nullable, PATTACH, #The particle attach type
	PIN entity, PN_Ref, PNF_Nullable, Entity, #The parent entity
	PIN position, PN_Vector, PNF_Nullable, #The offset position
}
STRUCT AnimInfo, For use with Entity:GetAnimInfo
{
	PIN flags=0, PN_Number, #Animation flags
	PIN fps=0, PN_Number, #Frame rate
	PIN label, PN_String, #Name of animation
	PIN numframes=0, PN_Number, #Number of frames in the animation
}
STRUCT SubModel, For use with Entity:GetSubModels
{
	PIN name, PN_String, #Name of submodel
	PIN id, PN_Number, #ID of submodel
}
STRUCT Convex, For use with Entity:PhysicsInitConvex and Entity:PhysicsInitMultiConvex
{
	PIN vertices, PN_Vector, PNF_Table, #Vertices for convex mesh
}
STRUCT NavExtent, For use with CNavArea:GetExtentInfo
{
	Vector hi Vector lo number SizeX number SizeY number SizeZ
	PIN hi, PN_Vector
	PIN lo, PN_Vector
	PIN SizeX, PN_Number
	PIN SizeY, PN_Number
	PIN SizeZ, PN_Number
}
STRUCT VectorDist, For use with NextBot:FindSpots
{
	PIN vector, PN_Vector
	PIN distance, PN_Number	
}
STRUCT CursorData, For use with PathFollower:GetCursorData
{
	PIN curvature, PN_Number
	PIN forward, PN_Vector
	PIN pos, PN_Vector
}
STRUCT ShadowParams, For use with PhysObj:ComputeShadowControl
{
	NAME secondstoarrive, secondsToArrive
	NAME angle, angles
	NAME maxangular, maxAngular
	NAME maxangulardamp, maxAngularDamp
	NAME maxspeed, maxSpeed
	NAME maxspeeddamp, maxSpeedDamp
	NAME dampfactor, dampFactor
	NAME teleportdistance, teleportDistance
	NAME deltatime, deltaTime
	PIN secondstoarrive=1, PN_Number, #How long it takes to move to pos and rotate accordingly
	PIN pos, PN_Vector, #Where you want to move to
	PIN angle, PN_Angles, #Angle you want to move to
	PIN maxangular=5000, PN_Number, #What should be the maximal angular force applied
	PIN maxangulardamp=10000, PN_Number, #At which force/speed should it start damping the rotation
	PIN maxspeed=1000000, PN_Number, #Maximal linear force applied
	PIN maxspeeddamp=10000, PN_Number, #Maximal linear force/speed before damping
	PIN dampfactor=0.8, PN_Number, #The percentage it should damp the linear/angular force if it reaches it's max amount
	PIN teleportdistance=200, PN_Number, #If it's further away than this it'll teleport ( Set to 0 to not teleport )
	PIN deltatime, PN_Number, #The deltatime it should use
}
STRUCT AmmoData, Table structure that describes a Source Engine ammo type.
{
	NAME dmgtype, damageType
	NAME maxsplash, maxSplash
	NAME minsplash, minSplash
	NAME npcdmg, npcDamage
	NAME plydmg, playerDamage
	NAME maxcarry, maxCarry
	PIN dmgtype=DMG_BULLET, PN_Enum, PNF_None, DMG, #Damage type using DMG_ Enums.
	PIN force=1000, PN_Number, #The force of the ammo.
	PIN maxsplash=0, PN_Number, #The maximum water splash size
	PIN minsplash=0, PN_Number, #The minimum water splash size
	PIN name, PN_String, #Name of the ammo
	PIN npcdmg=10, PN_Number, #The damage dealt to NPCs
	PIN plydmg=10, PN_Number, #The damage dealt to players
	PIN tracer=TRACER_NONE, PN_Enum, PNF_None, TRACER, #Tracer type
	PIN maxcarry=9999, PN_Number, #Maximum amount of ammo of this type the player should be able to carry in reserve.
	PIN flags=0, PN_Enum, PNF_Bitfield, AMMO, #Flags for the ammo type
}
STRUCT AngPos, Table used by various functions, such as Entity:GetAttachment.
{
	NAME Ang, angle
	NAME Pos, pos
	PIN Ang, PN_Angles, #Angle
	PIN Pos, PN_Vector, #Position
}
STRUCT AnimationData
{
	
}
STRUCT AttachmentData, Table returned by Entity:GetAttachments.
{
	PIN id, PN_Number, #Index of the attachment
	PIN name, PN_String, #Name of the attachment
}
STRUCT BodyGroupData, Table returned by Entity:GetBodyGroups.
{
	PIN id, PN_Number, #Index of the body group
	PIN name, PN_String, #Name of the body group
	PIN num, PN_Number, #Amount of subgroups
}
STRUCT BoneManipulationData, Structure used for storing/restoring bone manipulations.
{
	NAME s, scale
	NAME a, angles
	NAME p, pos
	PIN s, PN_Vector, PNF_Nullable, #The entity's scale manipulation of the bone
	PIN a, PN_Angles, PNF_Nullable, #The entity's angle manipulation of the bone
	PIN p, PN_Vector, PNF_Nullable, #The entity's position manipulation of the given bone
}
CALLBACK FuncBulletCallback
{
	IN attacker, PN_Ref, PNF_None, Entity
	IN trace, PN_Struct, PNF_None, TraceResult
	IN damageInfo, PN_Ref, PNF_None, CTakeDamageInfo
}
STRUCT Bullet
{
	PIN Attacker, PN_Ref, PNF_Nullable, Entity, #The entity that should be reported as attacker eg. a player
	PIN Callback, PN_Func, PNF_Nullable, FuncBulletCallback, #Function to be called after the bullet was fired.
	PIN Damage=1, PN_Number, #The damage dealt by the bullet
	PIN Force=1, PN_Number, #The force of the bullets
	PIN Distance=56756, PN_Number, #Maximum distance the bullet can travel
	PIN HullSize=0, PN_Number, #The hull size of the bullet
	PIN Num=1, PN_Number, #The amount of bullets to fire
	PIN Tracer=1, PN_Number, #Show tracer for every x bullets
	PIN AmmoType, PN_String, #The ammunition name
	PIN TracerName, PN_String, #The tracer name.
	PIN Dir, PN_Vector, PNF_Nullable, #The fire direction
	PIN Spread, PN_Vector, PNF_Nullable, #The spread, only x and y are needed
	PIN Src, PN_Vector, PNF_Nullable, #The position to fire the bullets from
	PIN IgnoreEntity, PN_Ref, PNF_Nullable, Entity, #The entity that the bullet will ignore when it will be shot.
}
STRUCT CamDataOrtho, For use with CamData
{
	PIN left, PN_Number
	PIN right, PN_Number
	PIN top, PN_Number
	PIN bottom, PN_Number
}
STRUCT CamData, Table structure used GM:CalcView and GM:CalcVehicleView hook.
{
	NAME znear, zNear
	NAME zfar, zFar
	NAME drawviewer, drawViewer
	PIN origin, PN_Vector, #The camera's position
	PIN angles, PN_Angles, #The camera's angles
	PIN fov, PN_Number, #The camera's FOV
	PIN znear, PN_Number, #Distance to near clipping plane
	PIN zfar, PN_Number, #Distance to far clipping plane
	PIN drawviewer=false, PN_Bool, #Set true to draw local players player model.
	PIN ortho, PN_Struct, PNF_Nullable, CamDataOrtho
}
STRUCT CollisionData, Passed as argument of ENTITY:PhysicsCollide.
{
	PIN HitPos, PN_Vector, #The collision position
	PIN HitEntity, PN_Ref, PNF_None, Entity, #The other collision entity
	PIN OurOldVelocity, PN_Vector, #The entity's velocity before the collision
	PIN HitObject, PN_Ref, PNF_None, PhysObj, #Other entity's physics object
	PIN DeltaTime, PN_Number, #Time since the last collision with this HitEntity
	PIN TheirOldVelocity, PN_Vector, #Speed of the other entity before the collision
	PIN Speed, PN_Number, #The speed of the entity before the collision
	PIN HitNormal, PN_Vector, #Normal of the surface that hit the other entity
	PIN PhysObject, PN_Ref, PNF_None, PhysObj, #Entity's physics object
}
STRUCT Color
{
	METATABLE Color
	PIN r=255, PN_Number, #An integer from 0-255 describing the red value of the color.
	PIN g=255, PN_Number, #An integer from 0-255 describing the green value of the color.
	PIN b=255, PN_Number, #An integer from 0-255 describing the blue value of the color.
	PIN a=255, PN_Number, PNF_Nullable, #An integer from 0-255 describing the alpha (transparency) of the color.
}
STRUCT DateData, Table returned by os.date and used by os.time.
{
	PIN day, PN_Number, #Day of the month
	PIN hour, PN_Number, #Hour
	PIN isdst, PN_Bool, #Daylight saving enabled
	PIN min, PN_Number, #Minute
	PIN month, PN_Number, #Month January: 1, December: 12
	PIN sec, PN_Number, #Second
	PIN wday, PN_Number, #Day of the week Sunday: 1, Saturday: 7
	PIN yday, PN_Number, #Day of the year
	PIN year, PN_Number, #Year
}
STRUCT EmitSoundInfo, Passed as argument of GM:EntityEmitSound.
{
	NAME SoundName, name
	NAME OriginalSoundName, original
	NAME SoundTime, time
	NAME SoundLevel, level
	PIN SoundName, PN_String, #The file path of the played sound.
	PIN OriginalSoundName, PN_String, #The original file path or soundscript name.
	PIN SoundTime=0, PN_Number, #The time at which the sound should be played.
	PIN DSP=0, PN_Number, #The DSP (digital signal processing) preset applied to the sound.
	PIN SoundLevel=SNDLVL_NORM, PN_Enum, PNF_None, SNDLVL, #The sound's attenuation
	PIN Pitch=100, PN_Number, #The pitch of the played sound
	PIN Flags=0, PN_Enum, PNF_Bitfield, SND, #The bit flags of the played sound
	PIN Channel=CHAN_AUTO, PN_Enum, PNF_None, CHAN, #The sound's channel.
	PIN Volume=1, PN_Number, #The volume of the played sound
	PIN Entity, PN_Ref, PNF_Nullable, Entity, #The entity that played the sound.
	PIN Pos, PN_Vector, PNF_Nullable, #The origin of the played sound.
}
CALLBACK FuncHTTPFailed
{
	IN reason, PN_String
}
CALLBACK FuncHTTPSuccess
{
	IN code, PN_Number
	IN body, PN_String
	IN headers, PN_Any, PNF_Table
}
STRUCT HTTPRequest
{
	PIN failed, PN_Func, PNF_None, FuncHTTPFailed, #Function to be called on failure.
	PIN success, PN_Func, PNF_None, FuncHTTPSuccess, #Function to be called on success.
	PIN method, PN_String, #Request method, case insensitive.
	PIN url, PN_String, #The target url
	PIN parameters, PN_String, PNF_Table, #KeyValue table for parameters
	PIN headers, PN_String, PNF_Table, #KeyValue table for headers
	PIN body, PN_String, PNF_Nullable, #Body string for POST data.
	PIN type, PN_String, PNF_Nullable, #Content type for body.
}
STRUCT ToScreenData, Table returned by Vector:ToScreen.
{
	PIN x, PN_Number, #The x coordinate on the players screen
	PIN y, PN_Number, #The y coordinate on the players screen
	PIN visible, PN_Bool, #The coordinate is not behind the player
}
STRUCT Trace, Table structure used for util.TraceLine.
{
	PIN start, PN_Vector, #The start position of the trace
	PIN endpos, PN_Vector, #The end position of the trace
	PIN filter, PN_Ref, PNF_Table|PNF_Nullable, Entity, #Things the trace should not hit.
	PIN mask=MASK_SOLID, PN_Enum, PNF_None, MASK, #This determines what the trace should hit and what it shouldn't hit.
	PIN collisiongroup=COLLISION_GROUP_NONE, PN_Enum, PNF_None, COLLISION_GROUP, #This determines what the trace should hit in regards to the entity's collision group.
	PIN ignoreworld=false, PN_Bool, #Should the trace ignore world or not
}
STRUCT TraceResult, Table structure used as trace result.
{
	PIN Entity, PN_Ref, PNF_Nullable, Entity, #The entity hit by the trace.
	PIN Fraction=1, PN_Number, #This indicates the how much of your trace length was used from 0-1
	PIN FractionLeftSolid=0, PN_Number, #Given the trace started in a solid enviroment, this will return at what distance the trace left the solid from 0-1. Doesn't work if the trace hit a non-worldspawn entity.
	PIN Hit, PN_Bool, #Indicates whether the trace hit something.
	PIN HitBox, PN_Number, #The ID of the hitbox hit by the trace.
	PIN HitGroup, PN_Enum, PNF_None, HITGROUP, #What hitgroup the trace hit (not the same as HitBox).
	PIN HitNoDraw, PN_Bool, #Indicates whenever the trace hit a no-draw brush.
	PIN HitNonWorld, PN_Bool, #Indicates whenever the trace did not hit the world.
	PIN HitNormal, PN_Vector, PNF_Nullable, #The direction of the surface that was hit as a normal vector
	PIN HitPos, PN_Vector, PNF_Nullable, #The position the trace stopped. This will be the provided endpos if the trace hit nothing.
	PIN HitSky, PN_Bool, #Indicates whenever the trace hit the sky.
	PIN HitTexture, PN_String, #The surface material (not texture) of whatever the trace hit.
	PIN HitWorld, PN_Bool, #Indicates whenever the trace hit the world.
	PIN MatType, PN_Enum, PNF_None, MAT, #the material hit by the trace.
	PIN Normal, PN_Vector, PNF_Nullable, #The direction of the trace as a normal vector.
	PIN PhysicsBone, PN_Number, #The PhysObj ID that was hit.
	PIN StartPos, PN_Vector, PNF_Nullable, #The origin of the trace. Will match the provided startpos.
	PIN SurfaceProps, PN_Number, #ID of hit surface property from scripts/surfaceproperties.txt.
	PIN StartSolid, PN_Bool, #Indicates whenever the trace started in a solid enviroment.
	PIN AllSolid, PN_Bool, #True if the entire trace is inside a solid.
	PIN SurfaceFlags, PN_Enum, PNF_Bitfield, SURF, #The surface flags of the hit surface.
	PIN DispFlags, PN_Enum, PNF_Bitfield, DISPSURF, #The displacement flags of the hit surface.
	PIN Contents, PN_Enum, PNF_Bitfield, CONTENTS, #The contents of the hit surface.
}