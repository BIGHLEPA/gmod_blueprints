LIB GLOBAL
{
	FUNC SERVER AddOriginToPVS
	{
		DESC Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn.
		IN position, PN_Vector, #The origin to add.
	}
	FUNC CLIENT AddWorldTip
	{
		DESC This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.
		IN entindex=nil, PN_Number, PNF_Nullable, #This argument is no longer used; it has no effect on anything. You can use nil in this argument.
		IN text, PN_String, #The text for the world tip to display.
		IN dieTime, PN_Number, PNF_Nullable, #This argument is no longer used; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument.
		IN pos, PN_Vector, PNF_Nullable, #Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip.
		IN ent, PN_Ref, PNF_Nullable, Entity, #Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in pos with the Entity's position.
	}
	PURE SHARED Angle
	{
		DESC Creates an Angle object.
		IN pitch, PN_Number, PNF_Nullable, #The pitch value of the angle. If this is an Angle, this function will return a copy of the given angle. If this is a string, this function will try to parse the string as a angle. If it fails, it returns a 0 angle. (See examples)
		IN yaw, PN_Number, PNF_Nullable, #The yaw value of the angle.
		IN roll, PN_Number, PNF_Nullable, #The roll value of the angle.
		OUT angles, PN_Angles, #Created angle
	}
	FUNC SHARED AngleRand
	{
		DESC Returns an angle with a randomized pitch, yaw, and roll between min(inclusive), max(exclusive).
		IN min, PN_Number, PNF_Nullable, #Min bound inclusive.
		IN max, PN_Number, PNF_Nullable, #Max bound exclusive.
		OUT angles, PN_Angles, #The randomly generated angle.
	}
	PURE SHARED ColorAlpha
	{
		DESC Returns a new Color structure with the RGB components of the given Color structure and the alpha value specified.
		IN color, PN_Struct, PNF_None, Color, #The Color structure from which to take RGB values. This color will not be modified.
		IN alpha, PN_Number, #The new alpha value, a number between 0 and 255. Values above 255 will be clamped.
		OUT color, PN_Struct, PNF_None, Color, #The new Color structure with the modified alpha value
	}
	PURE SHARED ColorRand
	{
		DESC Creates a Color structure with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized.
		IN randomizeAlpha, PN_Bool, PNF_Nullable, #Should alpha be randomized.
		OUT color, PN_Struct, PNF_None, Color, #The created Color structure.
	}
	PURE SHARED ColorToHSL
	{
		DESC Converts a Color structure into HSL color space.
		IN color, PN_Struct, PNF_None, Color, #The Color structure.
		OUT hue, PN_Number, #The hue in degrees [0, 360).
		OUT sat, PN_Number, #The saturation in the range [0, 1].
		OUT light, PN_Number, #The lightness in the range [0, 1].
	}
	PURE SHARED ColorToHSV
	{
		DESC Converts a Color structure into HSV color space.
		IN color, PN_Struct, PNF_None, Color, #The Color structure.
		OUT hue, PN_Number, #The hue in degrees [0, 360).
		OUT sat, PN_Number, #The saturation in the range [0, 1].
		OUT value, PN_Number, #The value in the range [0, 1].
	}
	FUNC CLIENT ClientsideScene
	{
		DESC Creates a scene entity based on the scene name and the entity.
		IN name, PN_String, #The name of the scene.
		IN targetEnt, PN_Ref, PNF_None, Entity, #The entity to play the scene on.
		OUT sceneEntity, PN_Ref, PNF_None, CSEnt, #C_SceneEntity
	}
	PURE SHARED ConVarExists
	{
		DESC Returns whether a ConVar with the given name exists or not
		IN name, PN_String, #Name of the ConVar.
		OUT exists, PN_Bool, #True if the ConVar exists, false otherwise.
	}
	FUNC SHARED CreateClientConVar
	{
		DESC Makes a clientside-only console variable
		IN name, PN_String, #Name of the ConVar to be created and able to be accessed. This cannot be a name of existing console command or console variable. It will silently fail if it is.
		IN default, PN_String, #Default value of the ConVar.
		IN shouldsave, PN_Bool, PNF_Nullable, #Should the ConVar be saved across sessions
		IN userinfo, PN_Bool, PNF_Nullable, #Should the ConVar and its containing data be sent to the server when it has changed. This make the convar accessible from server using Player:GetInfoNum and similar functions.
		IN helptext, PN_String, PNF_Nullable, #Help text to display in the console.
		IN min, PN_Number, PNF_Nullable, #If set, the convar cannot be changed to a number lower than this value. Next Update Change This feature is only available in the next update.
		IN max, PN_Number, PNF_Nullable, #If set, the convar cannot be changed to a number higher than this value. Next Update Change This feature is only available in the next update.
		OUT convar, PN_Ref, PNF_None, ConVar, #Created convar.
	}
	FUNC SHARED CreateConVar
	{
		DESC Creates a console variable (ConVar), in general these are for things like gamemode/server settings.
		IN name, PN_String, #Name of the convar. This cannot be a name of an engine console command or console variable. It will silently fail if it is. If it is the same name as another lua ConVar, it will return that ConVar object.
		IN value, PN_String, #Default value of the convar. Can also be a number.
		IN flags, PN_Number, PNF_Nullable, #Flags of the convar, see FCVAR_ Enums, either as bitflag or as table.
		IN helptext, PN_String, PNF_Nullable, #The help text to show in the console.
		IN min, PN_Number, PNF_Nullable, #If set, the convar cannot be changed to a number lower than this value. Next Update Change This feature is only available in the next update.
		IN max, PN_Number, PNF_Nullable, #If set, the convar cannot be changed to a number higher than this value. Next Update Change This feature is only available in the next update.
		OUT convar, PN_Ref, PNF_None, ConVar, #The convar created.
	}
	FUNC CLIENT CreateMaterial
	{
		DESC Creates a new material with the specified name and shader.
		IN name, PN_String, #The material name. Must be unique.
		IN shaderName, PN_String, #The shader name. See Category: Shaders.
		IN materialData, PN_Any, PNF_Table, #Key-value table that contains shader parameters and proxies. See: List of Shader Parameters on Valve Developers Wiki and each shader's page from Category: Shaders. NOTE	 Unlike IMaterial:SetTexture, this table will not accept ITexture values. Instead, use the texture's name (see ITexture:GetName).
		OUT material, PN_Ref, PNF_None, IMaterial, #Created material
	}
	FUNC CLIENT CreateParticleSystem
	{
		DESC Creates a new particle system.
		IN ent, PN_Ref, PNF_None, Entity, #The entity to attach the control point to.
		IN effect, PN_String, #The name of the effect to create. It must be precached.
		IN partAttachment, PN_Enum, PNF_None, PATTACH, #See PATTACH_ Enums.
		IN entAttachment, PN_Number, PNF_Nullable, #The attachment ID on the entity to attach the particle system to
		IN offset, PN_Vector, PNF_Nullable, #The offset from the Entity:GetPos of the entity we are attaching this CP to.
		OUT particleSystem, PN_Ref, PNF_None, CNewParticleEffect, #The created particle system.
	}
	FUNC SHARED CreatePhysCollideBox
	{
		DESC Creates a new PhysCollide from the given bounds.
		IN mins, PN_Vector, #Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See OrderVectors.
		IN maxs, PN_Vector, #Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components.
		OUT physCollide, PN_Ref, PNF_None, PhysCollide, #The new PhysCollide. This will be a NULL PhysCollide (PhysCollide:IsValid returns false) if given bad vectors or no more PhysCollides can be created in the physics engine.
	}
	FUNC SHARED CreatePhysCollidesFromModel
	{
		DESC Creates PhysCollide objects for every physics object the model has. The model must be precached with util.PrecacheModel before being used with this function.
		IN modelName, PN_String, #Model path to get the collision objects of.
		OUT physCollides, PN_Ref, PNF_Table, PhysCollide, #Table of PhysCollide objects. The number of entries will match the model's physics object count. See also Entity:GetPhysicsObjectCount. Returns no value if the model doesn't exist, or has not been precached.
	}
	FUNC SHARED CreateSound
	{
		DESC Returns a sound parented to the specified entity.
		IN targetEnt, PN_Ref, PNF_None, Entity, #The target entity.
		IN soundName, PN_String, #The sound to play.
		IN filter, PN_Ref, PNF_Nullable, CRecipientFilter, #A CRecipientFilter of the players that will have this sound networked to them. NOTE	 This argument only works serverside.
		OUT soundPatch, PN_Ref, PNF_None, CSoundPatch, #The sound object
	}
	FUNC SHARED CurTime
	{
		DESC Returns the uptime of the server in seconds (to at least 4 decimal places)
		OUT curTime, PN_Number, #Time synced with the game server.
	}
	FUNC SHARED DamageInfo
	{
		DESC Returns an CTakeDamageInfo object.
		OUT damageInfo, PN_Ref, PNF_None, CTakeDamageInfo
	}
	FUNC SHARED DebugInfo
	{
		DESC Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds.
		IN slot, PN_Number, #The location on the right hand screen to write the debug info to. Starts at 0, no upper limit
		IN info, PN_String, #The debugging information to be written to the screen
	}
	FUNC CLIENT DOF_Kill
	{
		DESC Cancels current DOF post-process effect started with DOF_Start
	}
	FUNC CLIENT DOF_Start
	{
		DESC Cancels any existing DOF post-process effects. Begins the DOF post-process effect.
	}
	FUNC CLIENT DOFModeHack
	{
		DESC A hacky method used to fix some bugs regarding DoF.
		IN enable, PN_Bool, #Enables or disables depth-of-field mode
	}
	FUNC CLIENT DrawBloom
	{
		DESC Draws the bloom shader, which creates a glowing effect from bright objects.
		IN Darken, PN_Number, #Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of 1 will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow.
		IN Multiply, PN_Number, #Will affect how bright the glowing spots are. A value of 0 will make the bloom effect unnoticeable.
		IN SizeX, PN_Number, #The size of the bloom effect along the horizontal axis.
		IN SizeY, PN_Number, #The size of the bloom effect along the vertical axis.
		IN Passes, PN_Number, #Determines how much to exaggerate the effect.
		IN ColorMultiply, PN_Number, #Will multiply the colors of the glowing spots, making them more vivid.
		IN Red, PN_Number, #How much red to multiply with the glowing color. Should be between 0 and 1
		IN Green, PN_Number, #How much green to multiply with the glowing color. Should be between 0 and 1
		IN Blue, PN_Number, #How much blue to multiply with the glowing color. Should be between 0 and 1
	}
	FUNC CLIENT DrawColorModify
	{
		DESC Draws the Color Modify shader, which can be used to adjust colors on screen.
		IN modifyParameters, PN_Any, PNF_Table, #Color modification parameters. See g_colourmodify shader and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function.
	}
	FUNC CLIENT DrawMaterialOverlay
	{
		DESC Draws a material overlay on the screen.
		IN Material, PN_String, #This will be the material that is drawn onto the screen.
		IN RefractAmount, PN_Number, #This will adjust how much the material will refract your screen.
	}
	FUNC CLIENT DrawMotionBlur
	{
		DESC Creates a motion blur effect by drawing your screen multiple times.
		IN AddAlpha, PN_Number, #How much alpha to change per frame.
		IN DrawAlpha, PN_Number, #How much alpha the frames will have. A value of 0 will not render the motion blur effect.
		IN Delay, PN_Number, #Determines the amount of time between frames to capture.
	}
	FUNC CLIENT DrawSharpen
	{
		DESC Draws the sharpen shader, which creates more contrast.
		IN Contrast, PN_Number, #How much contrast to create.
		IN Distance, PN_Number, #How large the contrast effect will be.
	}
	FUNC CLIENT DrawSobel
	{
		DESC Draws the sobel shader, which detects edges and draws a black border.
		IN Threshold, PN_Number, #Determines the threshold of edges. A value of 0 will make your screen completely black.
	}
	FUNC CLIENT DrawSunbeams
	{
		DESC Renders the post-processing effect of beams of light originating from the map's sun. Utilises the "pp/sunbeams" material
		IN darken, PN_Number, #$darken property for sunbeams material
		IN multiplier, PN_Number, #$multiply property for sunbeams material
		IN sunSize, PN_Number, #$sunsize property for sunbeams material
		IN sunX, PN_Number, #$sunx property for sunbeams material
		IN sunY, PN_Number, #$suny property for sunbeams material
	}
	FUNC CLIENT DrawTexturize
	{
		DESC Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See g_texturize for information on making the texture.
		IN Scale, PN_Number, #Scale of the texture. A smaller number creates a larger texture.
		IN BaseTexture, PN_Number, #This will be the texture to use in the effect. Make sure you use Material to get the texture number
	}
	FUNC CLIENT DrawToyTown
	{
		DESC Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name.
		IN Passes, PN_Number, #An integer determining how many times to draw the effect. A higher number creates more blur.
		IN Height, PN_Number, #The amount of screen which should be blurred on the top and bottom.
	}
	FUNC SHARED DropEntityIfHeld
	{
		DESC Drops the specified entity if it is being held by any player with Gravity Gun or +use pickup.
		IN ent, PN_Ref, PNF_None, Entity, #The entity to drop.
	}
	FUNC SHARED EffectData
	{
		DESC Returns a CEffectData object to be used with util.Effect.
		OUT effect, PN_Ref, PNF_None, CEffectData
	}
	FUNC SHARED EmitSentence
	{
		DESC Plays a sentence from scripts/sentences.txt
		IN soundName, PN_String, #The sound to play
		IN position, PN_Vector, #The position to play at
		IN entity, PN_Number, #The entity to emit the sound from. Must be Entity:EntIndex
		IN channel=CHAN_AUTO, PN_Enum, PNF_Nullable, CHAN, #The sound channel, see CHAN_ Enums.
		IN volume=1, PN_Number, PNF_Nullable, #The volume of the sound, from 0 to 1
		IN soundLevel=75, PN_Number, #The sound level of the sound, see SNDLVL_ Enums
		IN soundFlags=SND_NOFLAGS, PN_Enum, PNF_Nullable, SND, #The flags of the sound, see SND_ Enums
		IN pitch=100, PN_Number, PNF_Nullable, #The pitch of the sound, 0-255
	}
	FUNC SHARED EmitSound
	{
		DESC Emits the specified sound at the specified position.
		IN soundName, PN_String, #The sound to play
		IN position, PN_Vector, #The position to play at
		IN entity, PN_Number, #The entity to emit the sound from. Can be an Entity:EntIndex or one of the following: 0 - Plays sound on the world (Position set to 0,0,0) -1 - Plays sound on the local player (on server acts as 0) -2 - Plays UI sound (Position set to 0,0,0, no spatial sound,on server acts as 0)
		IN channel=CHAN_AUTO, PN_Enum, PNF_Nullable, CHAN, #The sound channel, see CHAN_ Enums.
		IN volume=1, PN_Number, PNF_Nullable, #The volume of the sound, from 0 to 1
		IN soundLevel=75, PN_Number, #The sound level of the sound, see SNDLVL_ Enums
		IN soundFlags=SND_NOFLAGS, PN_Enum, PNF_Nullable, SND, #The flags of the sound, see SND_ Enums
		IN pitch=100, PN_Number, PNF_Nullable, #The pitch of the sound, 0-255
	}
	PURE SHARED Entity
	{
		DESC Returns the entity with the matching Entity:EntIndex.
		IN index, PN_Number, #The entity index.
		OUT entity, PN_Ref, PNF_None, Entity, #The entity if it exists, or NULL if it doesn't.
	}
	FUNC SHARED ErrorNoHalt
	{
		DESC Alias of ErrorNoHalt.
		IN message, PN_Any, #Converts all arguments to strings and prints them with no spacing or line breaks.
	}
	PURE CLIENT EyeAngles
	{
		DESC Returns the angles of the current render context as calculated by GM:CalcView.
		OUT angles, PN_Angles, #The angle of the currently rendered scene.
	}
	PURE CLIENT EyePos
	{
		DESC Returns the origin of the current render context as calculated by GM:CalcView.
		OUT pos, PN_Vector, #Camera position.
	}
	PURE CLIENT EyeVector
	{
		DESC Returns the normal vector of the current render context as calculated by GM:CalcView, similar to EyeAngles.
		OUT vector, PN_Vector, #View direction of the currently rendered scene.
	}
	PURE CLIENT FrameNumber
	{
		DESC Returns the number of frames rendered since the game was launched.
	}
	PURE SHARED FrameTime
	{
		DESC Returns the CurTime-based time in seconds it took to render the last frame.
		OUT time, PN_Number, #time (in seconds)
	}
	PURE SHARED GetConVar
	{
		DESC Gets the ConVar with the specified name. This function caches the ConVar object internally.
		IN name, PN_String, #Name of the ConVar to get
		OUT convar, PN_Ref, PNF_None, ConVar, #The ConVar object
	}
	PURE SHARED GetHostName
	{
		DESC Returns the name of the current server.
		OUT hostName, PN_String, #The name of the server.
	}
	FUNC CLIENT GetRenderTarget
	{
		DESC Creates or gets the rendertarget with the given name.
		IN name, PN_String, #The internal name of the render target.
		IN width, PN_Number, #The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.
		IN height, PN_Number, #The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size.
		IN additive, PN_Bool, PNF_Nullable, #Sets whenever the rt should be additive.
		OUT rt, PN_Ref, PNF_None, ITexture, #The render target
	}
	FUNC CLIENT GetRenderTargetEx
	{
		DESC Creates (or gets if it already exsits) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than GetRenderTarget.
		IN name, PN_String, #The internal name of the render target. WARNING	 The name is treated like a path and gets its extension discarded. "name.1" and "name.2" are considered the same name and will result in the same render target being reused.
		IN width, PN_Number, #The width of the render target, must be power of 2.
		IN height, PN_Number, #The height of the render target, must be power of 2.
		IN sizeMode, PN_Enum, PNF_None, RT, #Bitflag that influences the sizing of the render target, see RT_SIZE_ Enums.
		IN depthMode, PN_Enum, PNF_None, MATERIAL, #Bitflag that determines the depth buffer usage of the render target MATERIAL_RT_DEPTH_ Enums.
		IN textureFlags, PN_Enum, PNF_None, TEXTUREFLAGS, #Bitflag that configurates the texture, see TEXTUREFLAGS_ Enums. List of flags can also be found on the Valve's Developer Wiki: https://developer.valvesoftware.com/wiki/Valve_Texture_Format
		IN rtFlags, PN_Enum, PNF_None, CREATERENDERTARGETFLAGS, #Flags that controll the HDR behaviour of the render target, see CREATERENDERTARGETFLAGS_ Enums.
		IN imageFormat, PN_Enum, PNF_None, IMAGE, #Image format, see IMAGE_FORMAT_ Enums.
		OUT rt, PN_Ref, PNF_None, ITexture, #The new render target.
	}
	PURE CLIENT GetViewEntity
	{
		DESC Returns the entity the client is using to see from (such as the player itself, the camera, or another entity).
		OUT entity, PN_Ref, PNF_None, Entity, #The view entity.
	}
	PURE SHARED HSLToColor
	{
		DESC Converts a color from HSL color space into RGB color space and returns a Color structure.
		IN hue, PN_Number, #The hue in degrees from 0-360.
		IN saturation, PN_Number, #The saturation from 0-1.
		IN light, PN_Number, #The lightness from 0-1.
		OUT color, PN_Struct, PNF_None, Color, #The Color structure created from the HSL color space.
	}
	PURE SHARED HSVToColor
	{
		DESC Converts a color from HSV color space into RGB color space and returns a Color structure.
		IN hue, PN_Number, #The hue in degrees from 0-360.
		IN saturation, PN_Number, #The saturation from 0-1.
		IN value, PN_Number, #The value from 0-1.
		OUT color, PN_Struct, PNF_None, Color, #The Color structure created from the HSV color space.
	}
	FUNC SHARED HTTP
	{
		DESC Launches an asynchronous http request with the given parameters.
		IN parameters, PN_Struct, PNF_None, HTTPRequest, #The request parameters. See HTTPRequest structure.
		OUT success, PN_Bool, #true if we made a request, nil if we failed.
	}
	PURE SHARED IsEnemyEntityName
	{
		DESC Returns if the given NPC class name is an enemy.
		IN className, PN_String, #Class name of the entity to check
		OUT enemy, PN_Bool, #Is an enemy
	}
	PURE SHARED IsEntity
	{
		DESC Returns if the passed object is an Entity. Alias of isentity.
		IN variable, PN_Any, #The variable to check.
		OUT isEntity, PN_Bool, #True if the variable is an Entity.
	}
	PURE SHARED IsFirstTimePredicted
	{
		DESC Returns if this is the first time this hook was predicted.
		OUT predicted, PN_Bool, #Whether or not this is the first time being predicted.
	}
	PURE SHARED IsFriendEntityName
	{
		DESC Returns if the given NPC class name is a friend.
		IN className, PN_String, #Class name of the entity to check
		OUT friendly, PN_Bool, #Is a friend
	}
	PURE SHARED IsMounted
	{
		DESC Checks whether or not a game is currently mounted. Uses data given by engine.GetGames.
		IN game, PN_String, #The game string/app ID to check.
		OUT mounted, PN_Bool, #True if the game is mounted.
	}
	PURE SHARED IsTableOfEntitiesValid
	{
		DESC Returns whether or not every element within a table is a valid entity
		IN table, PN_Ref, PNF_Table, Entity, #Table containing entities to check
		OUT allValid, PN_Bool, #All entities valid
	}
	PURE SHARED IsUselessModel
	{
		DESC Returns whether or not a model is useless by checking that the file path is that of a proper model.
		IN modelName, PN_String, #The model name to be checked
		OUT isUseless, PN_Bool, #Whether or not the model is useless
	}
	PURE SHARED Lerp
	{
		DESC Performs a linear interpolation from the start number to the end number.
		IN t, PN_Number, #The fraction for finding the result. This number is clamped between 0 and 1.
		IN from, PN_Number, #The starting number. The result will be equal to this if delta is 0.
		IN to, PN_Number, #The ending number. The result will be equal to this if delta is 1.
		OUT value, PN_Number, #The result of the linear interpolation, (1 - t) * from + t * to.
	}
	PURE SHARED LerpAngle
	{
		DESC Returns point between first and second angle using given fraction and linear interpolation
		IN ratio, PN_Number, #Ratio of progress through values
		IN angleStart, PN_Angles, #Angle to begin from
		IN angleEnd, PN_Angles, #Angle to end at
		OUT angle, PN_Angles, #angle
	}
	PURE SHARED LerpVector
	{
		DESC Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors.
		IN fraction, PN_Number, #Fraction ranging from 0 to 1
		IN from, PN_Vector, #The initial Vector
		IN to, PN_Vector, #The desired Vector
		OUT vector, PN_Vector, #The lerped vector.
	}
	PURE CLIENT LocalPlayer
	{
		DESC Returns the player object of the current client.
		OUT player, PN_Ref, PNF_None, Player, #The player object representing the client.
	}
	PURE SHARED LocalToWorld
	{
		DESC Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.
		IN localPos, PN_Vector, #The position vector in the source coordinate system, that should be translated to world coordinates
		IN localAngles, PN_Angles, #The angle in the source coordinate system, that should be converted to a world angle. If you don't need to convert an angle, you can supply an arbitrary valid angle (e.g. Angle()).
		IN worldPos, PN_Vector, #The origin point of the source coordinate system, in world coordinates
		IN worldAngles, PN_Angles, #The angles of the source coordinate system, as a world angle
		OUT pos, PN_Vector, #The world position of the supplied local position.
		OUT angles, PN_Angles, #The world angles of the supplied local angle.
	}
	FUNC SHARED Material
	{
		DESC Either returns the material with the given name, or loads the material interpreting the first argument as the path.
		IN materialName, PN_String, #The material name or path. The path is relative to the materials/ folder. You do not need to add materials/ to your path. To retrieve a Lua material created with CreateMaterial, just prepend a "!" to the material name. NOTE	 Since paths are relative to the materials folder, resource paths like ../data/MyImage.jpg will work since ".." translates to moving up a parent directory in the file tree.
		IN pngParameters, PN_String, PNF_Nullable, #A string containing space separated keywords which will be used to add material parameters. See Material Parameters for more information. NOTE	 This feature only works when importing .png or .jpeg image files
		OUT material, PN_Ref, PNF_None, IMaterial, #Generated material
		OUT time, PN_Number, #How long it took for the function to run
	}
	PURE SHARED Matrix
	{
		DESC Returns a VMatrix object.
		IN data, PN_Any, PNF_Nullable|PNF_Table, #Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage. Can be a VMatrix to copy its data.
		OUT matrix, PN_Ref, PNF_None, VMatrix, #New matrix.
	}
	FUNC CLIENT Mesh
	{
		DESC Returns a new mesh object.
		IN mat, PN_Ref, PNF_Nullable, IMaterial, #The material the mesh is intended to be rendered with. It's merely a hint that tells that mesh what vertex format it should use.
		OUT mesh, PN_Ref, PNF_None, IMesh, #The created object.
	}
	PURE CLIENT NumModelSkins
	{
		DESC Returns the amount of skins the specified model has.
		IN modelName, PN_String, #Model to return amount of skins of
		OUT count, PN_Number, #Amount of skins
	}
	FUNC SHARED OrderVectors
	{
		DESC Modifies the given vectors so that all of vector2's axis are larger than vector1's by switching them around. Also known as ordering vectors.
		IN vector1, PN_Vector, #Bounding box min resultant
		IN vector2, PN_Vector, #Bounding box max resultant
	}
	FUNC SHARED ParticleEffect
	{
		DESC Creates a particle effect.
		IN particleName, PN_String, #The name of the particle effect.
		IN position, PN_Vector, #The start position of the effect.
		IN angles, PN_Angles, #The orientation of the effect.
		IN parent, PN_Ref, PNF_Nullable, Entity, #If set, the particle will be parented to the entity.
	}
	FUNC SHARED ParticleEffectAttach
	{
		DESC Creates a particle effect with specialized parameters.
		IN particleName, PN_String, #The name of the particle effect.
		IN attachType, PN_Enum, PNF_None, PATTACH, #Attachment type using PATTACH_ Enums.
		IN entity, PN_Ref, PNF_None, Entity, #The entity to be used in the way specified by the attachType.
		IN attachmentID, PN_Number, #The id of the attachment to be used in the way specified by the attachType.
	}
	FUNC CLIENT ParticleEmitter
	{
		DESC Creates a new CLuaEmitter.
		IN position, PN_Vector, #The start position of the emitter. This is only used to determine particle drawing order for translucent particles.
		IN use3D, PN_Bool, #Whenever to render the particles in 2D or 3D mode.
		OUT emitter, PN_Ref, PNF_None, CLuaEmitter, #The new particle emitter.
	}
	FUNC SHARED PrecacheParticleSystem
	{
		DESC Precaches the particle with the specified name.
		IN particleSystemName, PN_String, #The name of the particle system.
	}
	FUNC SERVER PrecacheScene
	{
		DESC Precaches a scene file.
		IN scene, PN_String, #Path to the scene file to precache.
	}
	FUNC SERVER PrecacheSentenceFile
	{
		DESC Load and precache a custom sentence file.
		IN filename, PN_String, #The path to the custom sentences.txt.
	}
	FUNC SERVER PrecacheSentenceGroup
	{
		DESC Precache a sentence group in a sentences.txt definition file.
		IN group, PN_String, #The group to precache.
	}
	FUNC SERVER PrintMessage
	{
		DESC Displays a message in the chat, console, or center of screen of every player.
		IN type, PN_Enum, PNF_None, HUD, #Which type of message should be sent to the players
		IN message, PN_String, #Message to be sent to the players
	}
	FUNC CLIENT ProjectedTexture
	{
		DESC Creates a new ProjectedTexture.
		OUT texture, PN_Ref, PNF_None, ProjectedTexture, #Newly created projected texture.
	}
	PURE CLIENT RealFrameTime
	{
		DESC Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example)
		OUT time, PN_Number, #Real frame time
	}
	PURE SHARED RealTime
	{
		DESC Returns the uptime of the game/server in seconds (to at least 4 decimal places)
		OUT time, PN_Number, #Uptime of the game/server.
	}
	FUNC SERVER RecipientFilter
	{
		DESC Creates a new CRecipientFilter.
		OUT filter, PN_Ref, PNF_None, CRecipientFilter, #The new created recipient filter.
	}
	PURE CLIENT RenderAngles
	{
		DESC Returns the angle that the clients view is being rendered at
		OUT angles, PN_Angles, #Render Angles
	}
	FUNC CLIENT RenderDoF
	{
		DESC Renders a Depth of Field effect
		IN origin, PN_Vector, #Origin to render the effect at
		IN angle, PN_Angles, #Angle to render the effect at
		IN usableFocusPoint, PN_Vector, #Point to focus the effect at
		IN angleSize, PN_Number, #Angle size of the effect
		IN radialSteps, PN_Number, #Amount of radial steps to render the effect with
		IN passes, PN_Number, #Amount of render passes
		IN spin, PN_Bool, #Whether to cycle the frame or not
		IN inView, PN_Any, PNF_Table, #Table of view data
		IN fov, PN_Number, #FOV to render the effect with
	}
	FUNC CLIENT RenderStereoscopy
	{
		DESC Renders the stereoscopic post-process effect
		IN viewOrigin, PN_Vector, #Origin to render the effect at
		IN viewAngles, PN_Angles, #Angles to render the effect at
	}
	FUNC CLIENT RenderSuperDoF
	{
		DESC Renders the Super Depth of Field post-process effect
		IN viewOrigin, PN_Vector, #Origin to render the effect at
		IN viewAngles, PN_Angles, #Angles to render the effect at
		IN viewFOV, PN_Number, #Field of View to render the effect at
	}
	FUNC SHARED SafeRemoveEntity
	{
		DESC Removes the given entity unless it is a player or the world entity
		IN ent, PN_Ref, PNF_None, Entity, #Entity to safely remove.
	}
	FUNC SHARED SafeRemoveEntityDelayed
	{
		DESC Removes entity after delay using SafeRemoveEntity
		IN entity, PN_Ref, PNF_None, Entity, #Entity to be removed
		IN delay, PN_Number, #Delay for entity removal in seconds
	}
	PURE CLIENT ScreenScale
	{
		DESC Returns a number based on the Size argument and your screen's width. The screen's width is always equal to size 640. This function is primarily used for scaling font sizes.
		IN Size, PN_Number, #The number you want to scale.
		OUT scaled, PN_Number, #The scaled output
	}
	PURE CLIENT ScrH
	{
		DESC Gets the height of the game's window (in pixels).
		OUT width, PN_Number, #The height of the game's window in pixels
	}
	PURE CLIENT ScrW
	{
		DESC Gets the width of the game's window (in pixels).
		OUT height, PN_Number, #The width of the game's window in pixels
	}
	PURE SHARED SoundDuration
	{
		DESC Returns the duration of the sound specified in seconds.
		IN soundName, PN_String, #The sound file path.
		OUT duration, PN_Number, #Sound duration in seconds.
	}
	PURE SHARED STNDRD
	{
		DESC Returns the ordinal suffix of a given number.
		IN number, PN_Number, #The number to find the ordinal suffix of.
		OUT suffix, PN_String, #suffix
	}
	PURE SHARED SysTime
	{
		DESC Returns a highly accurate time in seconds since the start up, ideal for benchmarking.
		OUT time, PN_Number, #Uptime of the server.
	}
	PURE SHARED TauntCamera
	{
		DESC Returns a TauntCamera object
		OUT camera, PN_Ref, PNF_None, TauntCamera
	}
	PURE SHARED TimedCos
	{
		DESC Returns a cosine value that fluctuates based on the current time
		IN frequency, PN_Number, #The frequency of fluctuation
		IN min, PN_Number, #Minimum value
		IN max, PN_Number, #Maxmimum value
		IN offset, PN_Number, #Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time
		OUT cosine, PN_Number, #Cosine value
	}
	PURE SHARED TimedSin
	{
		DESC Returns a sine value that fluctuates based on CurTime. The value returned will be between the start value plus/minus the range value.
		IN frequency, PN_Number, #The frequency of fluctuation, in hertz
		IN origin, PN_Number, #The center value of the sine wave.
		IN max, PN_Number, #This argument's distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4.
		IN offset, PN_Number, #Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time
		OUT sine, PN_Number, #Sine value
	}
	PURE SHARED tonumber
	{
		DESC Attempts to convert the value to a number.
		IN value, PN_Any, #The value to convert. Can be a number or string.
		IN base, PN_Number, PNF_Nullable, #The numeric base used in the string. Can be any integer between 2 and 36, inclusive.
		OUT number, PN_Number, #The numeric representation of the value with the given base, or nil if the conversion failed.
	}
	PURE SHARED TypeID
	{
		DESC Gets the associated type ID of the variable.
		IN variable, PN_Any, #The variable to get the type ID of.
		OUT type, PN_Enum, PNF_None, TYPE, #The type ID of the variable. See the TYPE_ Enums.
	}
	PURE SHARED UnPredictedCurTime
	{
		DESC Returns the current asynchronous in-game time.
		OUT time, PN_Number, #The asynchronous in-game time.
	}
	PURE SHARED Vector
	{
		DESC Creates a Vector object.
		IN x, PN_Number, PNF_Nullable, #The x component of the vector. If this is a Vector, this function will return a copy of the given vector. If this is a string, this function will try to parse the string as a vector. If it fails, it returns a 0 vector. (See examples)
		IN y, PN_Number, PNF_Nullable, #The y component of the vector.
		IN z, PN_Number, PNF_Nullable, #The z component of the vector.
		OUT vector, PN_Vector, #The created vector object.
	}
	PURE SHARED VectorRand
	{
		DESC Returns a random vector whose components are each between min(inclusive), max(exclusive).
		IN min=-1, PN_Number, PNF_Nullable, #Min bound inclusive.
		IN max=1, PN_Number, PNF_Nullable, #Max bound exclusive.
		OUT vector, PN_Vector, #The random direction vector.
	}
	PURE SHARED WorldToLocal
	{
		DESC Translates the specified position and angle into the specified coordinate system.
		IN worldPos, PN_Vector, #The position that should be translated from the current to the new system.
		IN worldAngles, PN_Angles, #The angles that should be translated from the current to the new system.
		IN localPos, PN_Vector, #The origin of the system to translate to.
		IN localAngles, PN_Angles, #The angles of the system to translate to.
		OUT pos, PN_Vector, #Local position
		OUT angles, PN_Angles, #Local angles
	}
}