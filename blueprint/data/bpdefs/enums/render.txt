ENUM BOX, Enumerations used by render.SetModelLighting.
{
	BOX_FRONT, Place the light from the front
	BOX_BACK, Place the light behind
	BOX_RIGHT, Place the light to the right
	BOX_LEFT, Place the light to the left
	BOX_TOP, Place the light to the top
	BOX_BOTTOM, Place the light to the bottom
}

ENUM CREATERENDERTARGETFLAGS, Enumerations used by GetRenderTargetEx. Clientside only.
{
	CREATERENDERTARGETFLAGS_HDR,
	CREATERENDERTARGETFLAGS_AUTOMIPMAP,
	CREATERENDERTARGETFLAGS_UNFILTERABLE_OK,
}

ENUM IMAGE_FORMAT, Enumerations used by GetRenderTargetEx. Clientside only.
{
	IMAGE_FORMAT_DEFAULT, 
	IMAGE_FORMAT_RGBA8888, 
	IMAGE_FORMAT_ABGR8888, 
	IMAGE_FORMAT_RGB888, 
	IMAGE_FORMAT_BGR888, 
	IMAGE_FORMAT_RGB565, 
	IMAGE_FORMAT_ARGB8888, 
	IMAGE_FORMAT_BGRA8888, 
	IMAGE_FORMAT_RGBA16161616, 
	IMAGE_FORMAT_RGBA16161616F, 
}

ENUM TEXFILTER, Enumerations used by render.PushFilterMin and render.PushFilterMag.
{
	TEXFILTER.NONE,
	TEXFILTER.POINT,
	TEXFILTER.LINEAR,
	TEXFILTER.ANISOTROPIC,
}

ENUM TEXTUREFLAGS, Bit flags used by GetRenderTargetEx. Clientside only. Information taken from here
{
	TEXTUREFLAGS_POINTSAMPLE, Low quality, "pixel art" texture filtering.
	TEXTUREFLAGS_TRILINEAR, Medium quality texture filtering.
	TEXTUREFLAGS_CLAMPS, Clamp S coordinates.
	TEXTUREFLAGS_CLAMPT, Clamp T coordinates.
	TEXTUREFLAGS_ANISOTROPIC, High quality texture filtering.
	TEXTUREFLAGS_HINT_DXT5, Used in skyboxes. Makes sure edges are seamless.
	TEXTUREFLAGS_PWL_CORRECTED, Purpose unknown.
	TEXTUREFLAGS_NORMAL, Texture is a normal map.
	TEXTUREFLAGS_NOMIP, Render largest mipmap only. (Does not delete existing mipmaps, just disables them.)
	TEXTUREFLAGS_NOLOD, Not affected by texture resolution settings.
	TEXTUREFLAGS_ALL_MIPS, No Minimum Mipmap
	TEXTUREFLAGS_PROCEDURAL, Texture is an procedural texture (code can modify it).
	TEXTUREFLAGS_ONEBITALPHA, One bit alpha channel used.
	TEXTUREFLAGS_EIGHTBITALPHA, Eight bit alpha channel used.
	TEXTUREFLAGS_ENVMAP, Texture is an environment map.
	TEXTUREFLAGS_RENDERTARGET, Texture is a render target.
	TEXTUREFLAGS_DEPTHRENDERTARGET, Texture is a depth render target.
	TEXTUREFLAGS_NODEBUGOVERRIDE, 
	TEXTUREFLAGS_SINGLECOPY, 
	TEXTUREFLAGS_UNUSED_00080000, 
	TEXTUREFLAGS_IMMEDIATE_CLEANUP, This feature is deprecated. You should avoid using it as it may be removed in a future version. Immediately destroy this texture when its reference count hits zero (aka TEXTUREFLAGS_UNUSED_00100000)
	TEXTUREFLAGS_UNUSED_00200000, 
	TEXTUREFLAGS_UNUSED_00400000, 
	TEXTUREFLAGS_NODEPTHBUFFER, Do not buffer for Video Processing, generally render distance.
	TEXTUREFLAGS_UNUSED_01000000, 
	TEXTUREFLAGS_CLAMPU, Clamp U coordinates (for volumetric textures).
	TEXTUREFLAGS_VERTEXTEXTURE, Usable as a vertex texture
	TEXTUREFLAGS_SSBUMP, Texture is a SSBump. (SSB)
	TEXTUREFLAGS_UNUSED_10000000, 
	TEXTUREFLAGS_BORDER, Clamp to border colour on all texture coordinates
	TEXTUREFLAGS_UNUSED_40000000, 
	TEXTUREFLAGS_UNUSED_80000000, 
}

ENUM RT_SIZE, Enumerations used by GetRenderTargetEx. Clientside only.
{
	RT_SIZE_NO_CHANGE, Only allowed for render targets that don't want a depth buffer (because if they have a depth buffer, the render target must be less than or equal to the size of the framebuffer).
	RT_SIZE_DEFAULT, Don't play with the specified width and height other than making sure it fits in the framebuffer.
	RT_SIZE_PICMIP, Apply picmip to the render target's width and height.
	RT_SIZE_HDR, frame_buffer_width / 4
	RT_SIZE_FULL_FRAME_BUFFER, Same size as frame buffer, or next lower power of 2 if we can't do that.
	RT_SIZE_OFFSCREEN, Target of specified size, don't mess with dimensions
	RT_SIZE_FULL_FRAME_BUFFER_ROUNDED_UP, Same size as the frame buffer, rounded up if necessary for systems that can't do non-power of two textures.
	RT_SIZE_REPLAY_SCREENSHOT, Rounded down to power of 2, essentially
	RT_SIZE_LITERAL, Use the size passed in. Don't clamp it to the frame buffer size. Really.
	RT_SIZE_LITERAL_PICMIP, 
}

ENUM DOF, Internal globals for SimpleDoF. Clientside only.
{
	DOF_OFFSET,
	DOF_SPACING,
}

ENUM TEXT_ALIGN, Enumerations used by draw.SimpleText, draw.DrawText and in TextData structure.
{
	TEXT_ALIGN_LEFT, Align the text on the left
	TEXT_ALIGN_CENTER, Align the text in center
	TEXT_ALIGN_RIGHT, Align the text on the right
	TEXT_ALIGN_TOP, Align the text on the top
	TEXT_ALIGN_BOTTOM, Align the text on the bottom
}

ENUM RENDERGROUP
{
	RENDERGROUP_STATIC_HUGE, Huge static prop, possibly leftover from goldsrc
	RENDERGROUP_OPAQUE_HUGE, Huge opaque entity, possibly leftover from goldsrc
	RENDERGROUP_STATIC, Static props?
	RENDERGROUP_OPAQUE, For non transparent/solid entities. For scripted entities, this will have ENTITY:Draw called
	RENDERGROUP_TRANSLUCENT, For translucent/transparent entities For scripted entities, this will have ENTITY:DrawTranslucent called
	RENDERGROUP_BOTH, For both translucent/transparent and opaque/solid anim entities For scripted entities, this will have both, ENTITY:Draw and ENTITY:DrawTranslucent called
	RENDERGROUP_VIEWMODEL, Solid weapon view models
	RENDERGROUP_VIEWMODEL_TRANSLUCENT, Transparent overlays etc
	RENDERGROUP_OPAQUE_BRUSH, For brush entities
	RENDERGROUP_OTHER, Unclassfied. Won't get drawn.
}

ENUM RENDERMODE
{
	RENDERMODE_NORMAL, Default render mode. Transparently has no effect.
	RENDERMODE_TRANSCOLOR, Supports transparency.
	RENDERMODE_TRANSTEXTURE, 
	RENDERMODE_GLOW, Intended for glowing sprites. Allows transparency, and forces the sprite or model to be rendered unlit. The size of a sprite rendered with Glow is consistent with the screen size (unlike the alternative World Space Glow), making it appear larger at a distance, in comparison to the world. The GlowProxySize keyvalue affects this Render Mode on sprites.
	RENDERMODE_TRANSALPHA, Enables Alphatesting. Legacy port from Goldsource. Obsolete in Source due to Alphatesting being handled in materials. Does not allow transparency. Use this to make alpha of Color work for your entity. For players, it must be set for their active weapon aswell.
	RENDERMODE_TRANSADD, Add the material's color values to the existing image, instead of performing a multiplication. Sprites will appear through world geometry and the sprite/model will always brighten the world. Allows transparency.
	RENDERMODE_ENVIROMENTAL, Causes the material to be not be drawn at all, similarly to Don't Render.
	RENDERMODE_TRANSADDFRAMEBLEND, Functions like Additive, but also blends between animation frames. Requires the material to have a functioning animating texture. Allows transparency.
	RENDERMODE_TRANSALPHADD, Functions similarly to Additive, except that the alpha channel controls the opacity of the sprite. An example of use is for dark sprites, with an example material being sprites/strider_blackball.vmt.
	RENDERMODE_WORLDGLOW, Functions similarly to Glow, with the exception that the size of the sprite is relative to the world rather than the screen. The GlowProxySize keyvalue affects this Render Mode on sprites.
	RENDERMODE_NONE, The entity is still being drawn and networked albeit invisible, therefore not making this Render Mode ideal for performance reasons. To completely avoid drawing and networking an entity, see EF_NODRAW.
}

ENUM kRenderFx, Used by Entity:SetRenderFX and returned by Entity:GetRenderFX.
{
	kRenderFxNone, None. No change.
	kRenderFxPulseSlow, Slowly pulses the entitys transparency, +-15 to the current alpha.
	kRenderFxPulseFast, Quickly pulses the entitys transparency, +-15 to the current alpha.
	kRenderFxPulseSlowWide, Slowly pulses the entitys transparency, +-60 to the current alpha.
	kRenderFxPulseFastWide, Quickly pulses the entitys transparency, +-60 to the current alpha.
	kRenderFxFadeSlow, Slowly fades away the entity, making it completely invisible. Starts from whatever alpha the entity currently has set.
	kRenderFxFadeFast, Quickly fades away the entity, making it completely invisible. Starts from whatever alpha the entity currently has set.
	kRenderFxSolidSlow, Slowly solidifies the entity, making it fully opaque. Starts from whatever alpha the entity currently has set.
	kRenderFxSolidFast, Quickly solidifies the entity, making it fully opaque. Starts from whatever alpha the entity currently has set.
	kRenderFxStrobeSlow, Slowly switches the entitys transparency between its alpha and 0.
	kRenderFxStrobeFast, Quickly switches the entitys transparency between its alpha and 0.
	kRenderFxStrobeFaster, Very quickly switches the entitys transparency between its alpha and 0.
	kRenderFxFlickerSlow, Same as Strobe Slow, but the interval is more randomized.
	kRenderFxFlickerFast, Same as Strobe Fast, but the interval is more randomized.
	kRenderFxNoDissipation, 
	kRenderFxDistort, Flickers ( randomizes ) the entitys transparency
	kRenderFxHologram, Same as Distort, but fades the entity away the farther you are from it.
	kRenderFxExplode, 
	kRenderFxGlowShell, 
	kRenderFxClampMinScale, 
	kRenderFxEnvRain, 
	kRenderFxEnvSnow, 
	kRenderFxSpotlight, 
	kRenderFxRagdoll, 
	kRenderFxPulseFastWider, Quickly pulses the entitys transparency, from 0 to 255.
}

ENUM MATERIAL, Enumerations used by mesh.Begin. Clientside only.
{
	MATERIAL_LINES, 
	MATERIAL_LINE_LOOP, 
	MATERIAL_LINE_STRIP, 
	MATERIAL_POINTS, 
	MATERIAL_POLYGON, 
	MATERIAL_QUADS, 
	MATERIAL_TRIANGLES, 
	MATERIAL_TRIANGLE_STRIP
}

ENUM MATERIAL_CULLMODE, Enumerations used by render.CullMode. Clientside only.
{
	MATERIAL_CULLMODE_CCW, Counter clock wise cull mode
	MATERIAL_CULLMODE_CW, Clock wise cull mode
}

ENUM MATERIAL_FOG, Enumerations used by render.GetFogMode and render.FogMode. Clientside only.
{
	MATERIAL_FOG_NONE, No fog
	MATERIAL_FOG_LINEAR, Linear fog
	MATERIAL_FOG_LINEAR_BELOW_FOG_Z, For use in conjunction with render.SetFogZ. Does not work if start distance is bigger than end distance. Ignores density setting. Seems to be broken? Used for underwater fog by the engine.
}

ENUM MATERIAL_LIGHT, Enumerations used by render.SetLocalModelLights. Clientside only.
{
	MATERIAL_LIGHT_DISABLE, No light
	MATERIAL_LIGHT_POINT, Point light
	MATERIAL_LIGHT_DIRECTIONAL, Directional light
	MATERIAL_LIGHT_SPOT, Spot light
}

ENUM MATERIAL_RT_DEPTH, Enumerations used by GetRenderTargetEx. Clientside only.
{
	MATERIAL_RT_DEPTH_SHARED, Do not create a depth-stencil buffer. Use the default depth-stencil buffer if used as render target 0.
	MATERIAL_RT_DEPTH_SEPARATE, Create a depth-stencil buffer. Use the created depth-stencil buffer if used as render target 0.
	MATERIAL_RT_DEPTH_NONE, Do not create a depth-stencil buffer. Disable depth and stencil buffer usage if used as render target 0.
	MATERIAL_RT_DEPTH_ONLY, Create a depth-stencil buffer. Use the created depth-stencil buffer if used as render target 0. Creates a color texture despite the name. Seems to behave the same as MATERIAL_RT_DEPTH_SEPARATE.
}

ENUM STENCIL
{
	STENCIL_NEVER, Never passes.
	STENCIL_LESS, Passes where the reference value is less than the stencil value.
	STENCIL_EQUAL, Passes where the reference value is equal to the stencil value.
	STENCIL_LESSEQUAL, Passes where the reference value is less than or equal to the stencil value.
	STENCIL_GREATER, Passes where the reference value is greater than the stencil value.
	STENCIL_NOTEQUAL, Passes where the reference value is not equal to the stencil value.
	STENCIL_GREATEREQUAL, Passes where the reference value is greater than or equal to the stencil value.
	STENCIL_ALWAYS, Always passes.
	STENCIL_KEEP, Preserves the existing stencil buffer value.
	STENCIL_ZERO, Sets the value in the stencil buffer to 0.
	STENCIL_REPLACE, Sets the value in the stencil buffer to the reference value, set using render.SetStencilReferenceValue.
	STENCIL_INCRSAT, Increments the value in the stencil buffer by 1, clamping the result.
	STENCIL_DECRSAT, Decrements the value in the stencil buffer by 1, clamping the result.
	STENCIL_INVERT, Inverts the value in the stencil buffer.
	STENCIL_INCR, Increments the value in the stencil buffer by 1, wrapping around on overflow.
	STENCIL_DECR, Decrements the value in the stencil buffer by 1, wrapping around on overflow.
}

ENUM STENCILCOMPARISONFUNCTION, Enumerations for use with render.SetStencilCompareFunction.
{
	STENCILCOMPARISONFUNCTION_NEVER, Never passes.
	STENCILCOMPARISONFUNCTION_LESS, Passes where the reference value is less than the stencil value.
	STENCILCOMPARISONFUNCTION_EQUAL, Passes where the reference value is equal to the stencil value.
	STENCILCOMPARISONFUNCTION_LESSEQUAL, Passes where the reference value is less than or equal to the stencil value.
	STENCILCOMPARISONFUNCTION_GREATER, Passes where the reference value is greater than the stencil value.
	STENCILCOMPARISONFUNCTION_NOTEQUAL, Passes where the reference value is not equal to the stencil value.
	STENCILCOMPARISONFUNCTION_GREATEREQUAL, Passes where the reference value is greater than or equal to the stencil value.
	STENCILCOMPARISONFUNCTION_ALWAYS, Always passes.
}

ENUM STENCILOPERATION, Enumerations for use with render.SetStencilPassOperation, render.SetStencilFailOperation and render.SetStencilZFailOperation. Clientside only.
{
	STENCILOPERATION_KEEP, Preserves the existing stencil buffer value.
	STENCILOPERATION_ZERO, Sets the value in the stencil buffer to 0.
	STENCILOPERATION_REPLACE, Sets the value in the stencil buffer to the reference value, set using render.SetStencilReferenceValue.
	STENCILOPERATION_INCRSAT, Increments the value in the stencil buffer by 1, clamping the result.
	STENCILOPERATION_DECRSAT, Decrements the value in the stencil buffer by 1, clamping the result.
	STENCILOPERATION_INVERT, Inverts the value in the stencil buffer.
	STENCILOPERATION_INCR, Increments the value in the stencil buffer by 1, wrapping around on overflow.
	STENCILOPERATION_DECR, Decrements the value in the stencil buffer by 1, wrapping around on overflow.
}