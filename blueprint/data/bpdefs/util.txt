LIB UTIL
{
	PURE AngleVectors, SHARED
	{
		IN Angles, PN_Angles
		OUT Forward, PN_Vector
		OUT Right, PN_Vector
		OUT Up, PN_Vector
		CODE #1 = $1:Forward() #2 = $1:Right() #3 = $1:Up()
		COMPACT false
	}
	FUNC SetEntityValue, SHARED
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		IN Value, PN_Any
		CODE if IsValid($1) then $1[\"bp_!graph_\" .. $2] = $3 end
	}
	PURE GetEntityValue, SHARED
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		OUT HasValue, PN_Bool
		OUT Value, PN_Any
		CODE if IsValid($1) then #1 = $1[\"bp_!graph_\" .. $2] ~= nil #2 = $1[\"bp_!graph_\" .. $2] else #1 = false #2 = nil end
	}
	FUNC ClearEntityValue, SHARED
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		CODE if IsValid($1) then $1[\"bp_!graph_\" .. $2] = nil end
	}
	PURE GetKeyValue, SHARED
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		OUT Value, PN_String
		CODE #1 = Entity_.GetKeyValues($1)[$2] or ""
	}
	PURE FindPlayerByName, SHARED
	{
		IN Name, PN_String
		OUT Player, PN_Ref, PNF_None, Player
		OUT Found, PN_Bool
		CODE
		{
			for _, pl in pairs(player.GetAll()) do 
			if pl:Nick():find($1) ~= nil then #1 = pl break end 
			end
			#2 = (#1 ~= nil)
		}
	}
	PURE ContainsString, SHARED
	{
		IN String, PN_String
		IN Find, PN_String
		OUT Result, PN_Bool
		CODE #1 = string.find($1, $2) ~= nil
	}
	FUNC MakeExplosion, SERVER
	{
		IN Owner, PN_Ref, PNF_Nullable, Entity
		IN Position, PN_Vector
		IN Damage, PN_Number
		LOCAL ent
		CODE
		{
			%ent = ents.Create("env_explosion")
			%ent:SetOwner($1)
			%ent:SetPos($2)
			%ent:Spawn()
			%ent:SetKeyValue("iMagnitude", $3)
			%ent:Fire("Explode")
		}
	}
}