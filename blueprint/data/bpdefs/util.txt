LIB UTIL
{
	PURE SHARED AngleVectors
	{
		IN Angles, PN_Angles
		OUT Forward, PN_Vector
		OUT Right, PN_Vector
		OUT Up, PN_Vector
		CODE #1 = $1:Forward() #2 = $1:Right() #3 = $1:Up()
		COMPACT false
	}
	FUNC SHARED SetEntityValue
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		IN Value, PN_Any
		CODE if IsValid($2) then $2[\"bp_!graph_\" .. $3] = $4 end
	}
	PURE SHARED GetEntityValue
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		OUT HasValue, PN_Bool
		OUT Value, PN_Any
		CODE if IsValid($1) then #1 = $1[\"bp_!graph_\" .. $2] ~= nil #2 = $1[\"bp_!graph_\" .. $2] else #1 = false #2 = nil end
	}
	FUNC SHARED ClearEntityValue
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		CODE if IsValid($2) then $2[\"bp_!graph_\" .. $3] = nil end
	}
	PURE SHARED GetKeyValue
	{
		IN Entity, PN_Ref, PNF_None, Entity
		IN Key, PN_String
		OUT Value, PN_String
		CODE #1 = Entity_.GetKeyValues($1)[$2] or ""
	}
	PURE SHARED FindPlayerByName
	{
		IN Name, PN_String
		OUT Player, PN_Ref, PNF_None, Player
		OUT Found, PN_Bool
		CODE #2 = false for _, pl in pairs(player.GetAll()) do if pl:Nick():find( $1 ) ~= nil then #1 = pl #2 = true end end
	}
	PURE SHARED ContainsString
	{
		IN String, PN_String
		IN Find, PN_String
		OUT Result, PN_Bool
		CODE #1 = string.find($1, $2) ~= nil
	}
}