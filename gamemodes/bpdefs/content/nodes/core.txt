HOOKS CORE
{
	REDIRECTNODE EntityFireBullets, CORE_EntityFireBullets
	HOOK Init, SHARED
	{
		DESC Called when the blueprint is created
		NOHOOK
	}
	HOOK Shutdown, SHARED
	{
		DESC Called when the blueprint is shut down
		NOHOOK
	}
	HOOK EntityFireBullets, SHARED
	{
		DEPRECATED
		OUT Entity, PN_Ref, PNF_None, Entity
		OUT Attacker, PN_Ref, PNF_None, Entity
		OUT Damage, PN_Number
		OUT Count, PN_Number
		OUT Source, PN_Vector
		OUT Direction, PN_Vector
		CODE
		{
			#2 = arg[1]
			#3 = arg[2].Attacker
			#4 = arg[2].Damage
			#5 = arg[2].Num
			#6 = arg[2].Src
			#7 = arg[2].Dir
		}
	}
}
LIB CORE
{
	REDIRECTNODE Pin, CORE_Pin
	PURE Pin, SHARED
	{
		IN In, PN_Any
		OUT Out, PN_Any
		INFORM 1,2
		COMPACT
		CODE #1 = $1
		COLLAPSE
	}
	SPECIAL Sequence, SHARED
	{
		REDIRECTPIN 1, Out_1
		REDIRECTPIN 2, Out_2
		CLASS Sequence
	}
	SPECIAL PlayURL, CLIENT
	{
		IN Exec, PN_Exec
		IN Url, PN_String
		IN Flags, PN_String
		OUT Thru, PN_Exec
		OUT Callback, PN_Exec
		OUT Channel, PN_Ref, PNF_None, IGModAudioChannel
		OUT ErrorID, PN_Number
		OUT ErrorName, PN_String
		LATENT
		CODE
		{
			sound.PlayURL( $2, $3, function(a,b,c) #3 = a #4 = b #5 = c @graph(#_2) end )
			#1
		}
	}
	SPECIAL ForEach, SHARED
	{
		IN Exec, PN_Exec
		IN Table, PN_Any, PNF_Table
		OUT Thru, PN_Exec
		OUT Each, PN_Exec
		OUT Key, PN_Any
		OUT Value, PN_Any
		INFORM 2,6
		JUMP iter
		CODE 
		{
			#3 = nil
			::^iter::
			#3, #4 = next($2, #3)
			if #3 ~= nil then pushjmp(^_iter) ip = #_2 goto jumpto end
			#1
		}
	}
	SPECIAL ForEachI, SHARED
	{
		IN Exec, PN_Exec
		IN Table, PN_Any, PNF_Table
		OUT Thru, PN_Exec
		OUT Each, PN_Exec
		OUT Num, PN_Number
		OUT Value, PN_Any
		INFORM 2,6
		JUMP iter
		LOCAL len
		CODE 
		{
			%len = __CH~HA__$2
			#3 = 0
			::^iter::
			if #3 < %len then
				#3 = #3 + 1
				#4 = $2[#3]
				pushjmp(^_iter) ip = #_2 goto jumpto
			end
			#1
		}
	}
	SPECIAL ForEachIReverse, SHARED
	{
		IN Exec, PN_Exec
		IN Table, PN_Any, PNF_Table
		OUT Thru, PN_Exec
		OUT Each, PN_Exec
		OUT Num, PN_Number
		OUT Value, PN_Any
		INFORM 2,6
		JUMP iter
		LOCAL len
		CODE 
		{
			#3 = __CH~HA__$2 + 1
			::^iter::
			if #3 > 1 then
				#3 = #3 - 1
				#4 = $2[#3]
				pushjmp(^_iter) ip = #_2 goto jumpto
			end
			#1
		}
	}
	SPECIAL For, SHARED
	{
		IN Exec, PN_Exec
		IN Start=1, PN_Number, #Start = 1
		IN End=1, PN_Number
		OUT Thru, PN_Exec
		OUT Each, PN_Exec
		OUT Num, PN_Number
		JUMP iter
		CODE 
		{
			#3 = $2 - 1
			::^iter::
			if #3 < $3 then #3 = #3 + 1 pushjmp(^_iter) ip = #_2 goto jumpto end
			#1
		}
	}
	SPECIAL Debounce, SHARED
	{
		IN Exec, PN_Exec
		IN Delay, PN_Number
		IN AlwaysReset, PN_Bool
		OUT Thru, PN_Exec
		OUT Debounced, PN_Exec
		LATENT
		LOCAL debounced
		CODE 
		{
			%debounced = __bpm.delayExists("debounce_!graph_!node")
			if %debounced and $3 then __bpm.delay("debounce_!graph_!node", $2, function() end) end
			if %debounced then #2 end
			__bpm.delay("debounce_!graph_!node", $2, function() end)
			#1
		}
	}
	SPECIAL Delay, SHARED
	{
		IN Exec, PN_Exec
		IN Delay, PN_Number
		OUT Thru, PN_Exec
		LATENT
		CODE 
		{
			__bpm.delay("delay_!graph_!node", $2, function() @graph(#_1) end)
			goto popcall
		}
	}
	SPECIAL DelayBoxed, SHARED
	{
		IN Exec, PN_Exec
		IN Delay, PN_Number
		IN Value, PN_Any
		OUT Thru, PN_Exec
		OUT Value, PN_Any
		INFORM 3,5
		LATENT
		CODE
		{
			#2 = $3
			__bpm.delay("delay_!graph_!node", $2, function() @graph(#_1) end)
			goto popcall
		}
	}
	FUNC ChatPrintAll, SHARED
	{
		REQUIREMETA Player
		DESC Sends a message to all players
		IN Message, PN_String, #Message to send to all players
		CODE
		{
			if SERVER then
			for _, pl in ipairs(player.GetAll()) do Player_.ChatPrint(pl, $1) end
			else
			Player_.ChatPrint(LocalPlayer(), $1)
			end
		}
	}
	PURE Client, SHARED
	{
		OUT IsClient, PN_Bool
		CODE #1 = CLIENT
	}
	PURE Server, SHARED
	{
		OUT IsServer, PN_Bool
		CODE #1 = SERVER
	}
	SPECIAL ClientOnly, SHARED
	{
		IN Exec, PN_Exec
		OUT Thru, PN_Exec
		FALLTHROUGH
		CODE if not CLIENT then goto popcall end
	}
	SPECIAL ServerOnly, SHARED
	{
		IN Exec, PN_Exec
		OUT Thru, PN_Exec
		FALLTHROUGH
		CODE if not SERVER then goto popcall end
	}
	SPECIAL Role, SHARED
	{
		IN Exec, PN_Exec
		OUT Server, PN_Exec
		OUT Client, PN_Exec
		CODE if SERVER then #1 else #2 end
	}
	PURE ToString, SHARED
	{
		IN Any, PN_Any
		OUT String, PN_String
		INFORM 1
		CODE #1 = tostring($1)
	}
	PURE ToNumber, SHARED
	{
		IN Value, PN_String
		OUT Number, PN_Number
		CODE #1 = tonumber($1) or 0
	}
	FUNC Print, SHARED
	{
		IN String, PN_String
		CODE print($1)
	}
	PURE Number, SHARED
	{
		IN Num, PN_Number
		OUT Num, PN_Number
		CODE #1 = $1
	}
	PURE Boolean, SHARED
	{
		IN Bool, PN_Bool
		OUT Bool, PN_Bool
		CODE #1 = $1
	}
	PURE String, SHARED
	{
		IN String, PN_String
		OUT String, PN_String
		CODE #1 = $1
	}
	PURE IsValid, SHARED
	{
		IN Thing, PN_Any
		OUT Valid, PN_Bool
		CODE #1 = __genericIsValid($1)
		INFORM 1
	}
	FUNC SetRef, SHARED
	{
		IN Target, PN_Any
		IN Value, PN_Any
		CODE $1 = $2
		INFORM 3, 4
	}
	PURE Nil, SHARED
	{
		OUT Value, PN_Any
		CODE #1 = nil
		INFORM 1
		COMPACT
	}
	PURE IsNil, SHARED
	{
		IN Thing, PN_Any
		OUT Valid, PN_Bool
		CODE #1 = $1 == nil
		INFORM 1
	}
	PURE IsNotNil, SHARED
	{
		IN Thing, PN_Any
		OUT Valid, PN_Bool
		CODE #1 = $1 ~= nil
		INFORM 1
	}
	SPECIAL CheckValid, SHARED
	{
		CLASS CheckValid
	}
	PURE CheckValue, SHARED
	{
		IN Value, PN_Any, #Value to check
		IN Default, PN_Any
		OUT Out, PN_Any
		INFORM 1,2
		COMPACT false
		CODE #1 = (type($1) == type($2)) and $1 or $2
	}
	FUNC BPEntities, SHARED
	{
		IN Class, PN_BPClass, PNF_None, sent, #Class to look for
		OUT Entities, PN_BPRef, PNF_Table, #Entities found
		CLASS ClassInformed
		PARAM target, Entities
		CODE
		{
			#1 = {}
			for k,v in ipairs(ents.GetAll()) do
				if v.__bpm and v.__bpm.guid == $1 then
					#1[__CH~HA__#1+1] = v
				end
			end
		}
	}
	FUNC Error, SHARED
	{
		IN Message, PN_String
		CODE error($1)
	}
}